from aiogram.dispatcher import Dispatcher
from keyboards.main_kb import main_kb, choice_neuronet, cancel_kb
from create_bot import bot
from aiogram import types
from db.get import get_user_by_id
from db.create import create_user
from menu_bot import set_defailt_command
from fsm.states import Gpt_image, Black_to_white, Help_users

async def func_start(msg: types.Message):
    await set_defailt_command(bot)
    if get_user_by_id(msg.from_user.id) is not None:
        await bot.send_message(msg.from_user.id, "–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏", reply_markup=main_kb)
    else:
        create_user(chat_id=msg.from_user.id, username=msg.from_user.username)
        await bot.send_message(msg.from_user.id, f"–ü—Ä–∏–≤–µ—Ç {msg.from_user.first_name}!\n\n–≠—Ç–æ—Ç Telegram-–±–æ—Ç —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ø–æ–º–æ—â–Ω–∏–∫–æ–º –≤ –æ–±—â–µ–Ω–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:\n\nüîµ –ü–æ–ª—É—á–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\nüîµ –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\nüîµ –ü—Ä–µ–≤—Ä–∞—Ç–∏ —á–µ—Ä–Ω–æ-–±–µ–ª—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —Ü–≤–µ—Ç–Ω—ã–µ\nüü¢ –°–æ–∑–¥–∞–π —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —è–∑—ã–∫–∞—Ö\nüí° –ù–∞–π–¥–∏ –∏–¥–µ–∏ –¥–ª—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ä–∞–±–æ—Ç—ã\nüìö –û–±—Å—É–¥–∏ —Å–ª–æ–∂–Ω—ã–µ —Ç–µ–º—ã –∏ –ø–æ–ª—É—á–∏ —Å–æ–≤–µ—Ç—ã –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\nüß† –†–µ—à–∞–π –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\nüåê –ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏ –∏ –æ–±—Ä–∞—Ç–Ω–æ\n\n–ù–∞—á–∏–Ω–∞–π –æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!", reply_markup=main_kb)


async def func_question(msg: types.Message):
    if get_user_by_id(msg.from_user.id).gpt_text is not None:
        await bot.send_message(msg.from_user.id, "–ü—Ä–∏—à–ª–∏ –≤–æ–ø—Ä–æ—Å")
    else:
        await bot.send_message(msg.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", reply_markup=choice_neuronet)


async def func_gpt(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å", reply_markup=choice_neuronet)


async def func_help(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –ø—Ä–æ–±–ª–µ–º—É, –º—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—è —Ä–µ—à–∏—Ç—å –µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ", reply_markup=cancel_kb)
    await Help_users.help.set()

async def funck_image(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏:")
    await Gpt_image.text_image.set()

async def funck_bl_wh(msg: types.Message):
    await bot.send_message(msg.from_user.id, "–ü—Ä–∏—à–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫—É")
    await Black_to_white.blacktowhite.set()





def register_function_handlers(dp: Dispatcher):
    dp.register_message_handler(func_start, commands="start")
    dp.register_message_handler(func_question, commands="question")
    dp.register_message_handler(func_gpt, commands="gpt") 
    dp.register_message_handler(func_help, commands="help") 
    dp.register_message_handler(funck_image, commands="image")
    dp.register_message_handler(funck_bl_wh, commands="getcolor") # –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å 