from aiogram.dispatcher import Dispatcher
from keyboards.main_kb import choice_neuronet, text_keyboard, img_keyboard
from create_bot import bot
from aiogram import types
from db.update import update_gpt_text, update_gpt_img ,  update_subscribe
from aiogram.utils.exceptions import BotBlocked


async def callback_handler(msg: types.CallbackQuery):
    await msg.answer()
    if msg.data == "choice_gpt":
        await bot.send_message(msg.from_user.id, f"–í—ã–±–µ—Ä–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –∫–∞—Ä—Ç–∏–Ω–æ–∫", reply_markup=choice_neuronet)
    elif msg.data.startswith("gptt"):
        neiroset = msg.data.split("_")[-1]
        update_gpt_text(chat_id=msg.from_user.id, gpt=neiroset) 
        await bot.send_message(msg.from_user.id, f"–¢—ã –≤—ã–±—Ä–∞–ª {neiroset}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é")
    elif msg.data.startswith("gpti"):
        neiroset = msg.data.split("_")[-1]
        update_gpt_img(chat_id=msg.from_user.id, gpt=neiroset) 
        await bot.send_message(msg.from_user.id, f"–¢—ã –≤—ã–±—Ä–∞–ª {neiroset}\n\n–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª—é–±—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏\n\n–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é")

    elif msg.data == "text_gpt":
        await bot.send_message(msg.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞", reply_markup= text_keyboard(msg.from_user.id))

    elif msg.data == "image_gpt":
        await bot.send_message(msg.from_user.id, "–í—ã–±–∏—Ä–∞–π –Ω–µ–π—Ä–æ—Å–µ—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è", reply_markup= img_keyboard(msg.from_user.id))

    elif msg.data == "buy":
        await bot.send_invoice(chat_id=msg.from_user.id,
                               title='–ü–æ–¥–ø–∏—Å–∫–∞',
                               description='–ü–æ–∫—É–ø–∞–π –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Üüëáüëáüëá',
                               payload="subscribe",
                               provider_token="401643678:TEST:7961571b-581f-4aad-b83b-021a93a0c349", 
                               currency='RUB',
                               start_parameter='test_bot',
                               prices=[types.LabeledPrice('–†—É–±', 299_00)]
                               )


async def precheckout_callback(update: types.PreCheckoutQuery):
    try:
        await bot.answer_pre_checkout_query(update.id, True)
    except BotBlocked:
        pass


async def success_payment(msg: types.PreCheckoutQuery):
    try:
        await bot.send_message(msg.from_user.id, '–¢—ã –∫—É–ø–∏–ª –¥–æ—Å—Ç—É–ø –Ω–∞ –º–µ—Å—è—Ü')
        update_subscribe(msg.from_user.id)
    except BotBlocked:
        pass


def register_callback_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(callback_handler)
    dp.register_pre_checkout_query_handler(precheckout_callback)
    dp.register_message_handler(
        success_payment, content_types=types.ContentType.SUCCESSFUL_PAYMENT)
